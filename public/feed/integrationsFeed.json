[
  {
    "id": "hubspot-crm-contacts",
    "name": "HubSpot Contacts sync",
    "smallIcon": "/images/hubspot.svg",
    "largeIcon": "/images/hubspot.svg",
    "version": "5.2.0",
    "description": "Integrating with HubSpot is easy with Fusebit! This example lets you list Contacts in your customer's HubSpot instance.\n\n[Learn more](https://developer.fusebit.io/docs/hubspot)!\n",
    "tags": {
      "catalog": "hubspot,crm,sales,intro,popular"
    },
    "resources": {
      "configureAppDocUrl": "https://developer.fusebit.io/docs/hubspot#creating-your-own-hubspot-app"
    },
    "configuration": {
      "schema": {
        "type": "object",
        "properties": {
          "hubspotIntegration": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          "hubspotConnector": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          "ui": {
            "type": "object",
            "properties": {
              "toggle": {
                "type": "boolean",
                "description": "The \"toggle\" option renders boolean values as a toggle."
              }
            }
          }
        }
      },
      "uischema": {
        "type": "VerticalLayout",
        "elements": [
          {
            "type": "Control",
            "scope": "#/properties/hubspotIntegration/properties/id",
            "label": "Name"
          },
          {
            "type": "Control",
            "label": "Customize",
            "scope": "#/properties/ui/properties/toggle",
            "options": {
              "toggle": true
            }
          },
          {
            "type": "Control",
            "scope": "#/properties/hubspotConnector/properties/id",
            "label": "HubSpot Connector name",
            "rule": {
              "effect": "SHOW",
              "condition": {
                "scope": "#/properties/ui/properties/toggle",
                "schema": {
                  "const": true
                }
              }
            }
          }
        ]
      },
      "data": {
        "hubspotConnector": {
          "hubspotName": "hubspot-connector"
        }
      },
      "entities": {
        "hubspotConnector": {
          "entityType": "connector",
          "data": {
            "configuration": {
              "mode": {
                "useProduction": false
              },
              "scope": "contacts",
              "clientId": "<%global.consts.random%>",
              "clientSecret": "<%global.consts.random%>",
              "refreshErrorLimit": 100000,
              "refreshInitialBackoff": 100000,
              "refreshWaitCountLimit": 100000,
              "refreshBackoffIncrement": 100000,
              "accessTokenExpirationBuffer": 500
            },
            "files": {
              "package.json": "{\"name\":\"@fusebit-int/catalog-feed-integration-hubspot-crm-contacts-connector\",\"version\":\"5.5.7\",\"private\":true,\"scripts\":{\"redeploy\":\"fuse connector rm <%this.name%> && yarn deploy\",\"deploy\":\"fuse connector deploy <%this.name%> -d .\",\"get\":\"fuse connector get <%this.name%> -d .\"},\"dependencies\":{\"@fusebit-int/framework\":\"5.5.7\",\"@fusebit-int/hubspot-connector\":\"5.5.7\"}}"
            },
            "handler": "@fusebit-int/hubspot-connector"
          },
          "id": "<%this.id%>",
          "tags": {
            "fusebit.service": "hubspot"
          }
        },
        "hubspotIntegration": {
          "entityType": "integration",
          "data": {
            "configuration": {},
            "files": {
              "package.json": "{\"name\":\"@fusebit-int/catalog-feed-integration-hubspot-crm-contacts-integration\",\"version\":\"5.5.7\",\"private\":true,\"scripts\":{\"deploy\":\"fuse integration deploy <% this.id %> -d .\",\"get\":\"fuse integration get <% this.id %> -d .\"},\"dependencies\":{\"@fusebit-int/framework\":\"5.5.7\",\"@fusebit-int/hubspot-provider\":\"5.5.7\"},\"files\":[\"./integration.js\",\"README.md\"]}",
              "./integration.js": "// Fusebit HubSpot Integration\n//\n// This simple HubSpot integration allows you to call HubSpot APIs on behalf of the tenants of your\n// application. Fusebit manages the HubSpot authorization process and maps tenants of your application\n// to their HubSpot credentials, so that you can focus on implementing the integration logic.\n//\n// A Fusebit integration is a microservice running on the Fusebit platform.\n// You control the endpoints exposed from the microservice. You call those endpoints from your application\n// to perform specific tasks on behalf of the tenants of your app.\n//\n// Learn more about Fusebit Integrations at: https://developer.fusebit.io/docs/integration-programming-model\n\nconst { Integration } = require('@fusebit-int/framework');\n\nconst integration = new Integration();\n\n// Fusebit uses the KoaJS (https://koajs.com/) router to allow you to add custom HTTP endpoints\n// to the integration, which you can then call from witin your application.\nconst router = integration.router;\n\n// The sample test endpoint of this integration gets all contacts stored in the HubSpot account associated with your tenant.\nrouter.post('/api/tenant/:tenantId/test', integration.middleware.authorizeUser('instance:get'), async (ctx) => {\n  // Create a HubSpot client pre-configured with credentials necessary to communicate with your tenant's HubSpot account.\n  // For the HubSpot SDK documentation, see https://github.com/HubSpot/hubspot-api-nodejs.\n  const hubspotClient = await integration.tenant.getSdkByTenant(ctx, 'hubspotConnector', ctx.params.tenantId);\n\n  const contacts = await hubspotClient.crm.contacts.getAll();\n\n  ctx.body = `Successfully loaded ${contacts.length} Contacts from HubSpot`;\n});\n\nmodule.exports = integration;\n",
              "README.md": "Thanks for trying out Fusebit and downloading your <% global.consts.feed.name %> Integration code.\n\nUse your favorite tools to make any changes to the code in this folder.\n\n\n# Running your Integration\n\nTo run the Integration and test as you make changes, follow these steps:\n\n1. (Development-time only) The integration needs to know the Identity of the user on whose behalf to execute. In production, this will be handled by your application, but for test purposes, you can log in as yourself manually.\n\nOpen the test application for the '<% global.consts.integrationId %>' integration in the browser with:\n\n`fuse integration test <% global.consts.integrationId %>`\n\nYou will be asked to log in, and the integration will act on your behalf\ngoing forward.\n\n2. Note the `curl` command and JavaScript example displayed by the test application in the previous step and use that to invoke the integration. If your token expires, you can always obtain a new one by opening up the test application again with `fuse integration test <% global.consts.integrationId %>`, or by generating a new access token directly with `fuse token -o raw`.\n\n\n# Debugging your Integration\n\nAfter you make a code change and run the Integration, you can inspect `console`\noutput and any errors by running:\n\n`fuse integration log <% global.consts.integrationId %>`\n\n\n"
            },
            "handler": "./integration",
            "components": [
              {
                "name": "hubspotConnector",
                "skip": false,
                "provider": "@fusebit-int/hubspot-provider",
                "entityId": "<% global.entities.hubspotConnector.id %>",
                "dependsOn": [],
                "entityType": "connector"
              }
            ],
            "componentTags": {}
          },
          "id": "<% this.id %>",
          "tags": {
            "fusebit.service": "hubspot"
          }
        }
      }
    }
  },
  {
    "id": "salesforce",
    "name": "Salesforce",
    "smallIcon": "https://cdn.fusebit.io/assets/images/salesforce.svg",
    "largeIcon": "https://cdn.fusebit.io/assets/images/salesforce.svg",
    "version": "5.2.0",
    "description": "Integrating with Salesforce is easy with Fusebit! This example lets you list Contacts in your customer's Salesforce instance.\n\n[Learn more](https://developer.fusebit.io/docs/salesforce)!\n",
    "tags": {
      "catalog": "salesforce,crm,sales,popular"
    },
    "resources": {
      "configureAppDocUrl": "https://developer.fusebit.io/docs/salesforce#creating-your-own-salesforce-app"
    },
    "configuration": {
      "schema": {
        "type": "object",
        "properties": {
          "salesforceIntegration": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          "salesforceConnector": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          "ui": {
            "type": "object",
            "properties": {
              "toggle": {
                "type": "boolean",
                "description": "The \"toggle\" option renders boolean values as a toggle."
              }
            }
          }
        }
      },
      "uischema": {
        "type": "VerticalLayout",
        "elements": [
          {
            "type": "Control",
            "scope": "#/properties/salesforceIntegration/properties/id",
            "label": "Name"
          },
          {
            "type": "Control",
            "label": "Customize",
            "scope": "#/properties/ui/properties/toggle",
            "options": {
              "toggle": true
            }
          },
          {
            "type": "Control",
            "scope": "#/properties/salesforceConnector/properties/id",
            "label": "Salesforce Connector name",
            "rule": {
              "effect": "SHOW",
              "condition": {
                "scope": "#/properties/ui/properties/toggle",
                "schema": {
                  "const": true
                }
              }
            }
          }
        ]
      },
      "data": {
        "salesforceConnector": {
          "salesforceName": "salesforce-connector"
        }
      },
      "entities": {
        "salesforceConnector": {
          "entityType": "connector",
          "data": {
            "configuration": {
              "mode": {
                "useProduction": false
              },
              "scope": "api offline_access",
              "clientId": "<%global.consts.random%>",
              "clientSecret": "<%global.consts.random%>",
              "refreshErrorLimit": 100000,
              "refreshInitialBackoff": 100000,
              "refreshWaitCountLimit": 100000,
              "refreshBackoffIncrement": 100000,
              "accessTokenExpirationBuffer": 500
            },
            "files": {
              "package.json": "{\"name\":\"@fusebit-int/catalog-feed-integration-salesforce-connector\",\"version\":\"5.5.7\",\"private\":true,\"scripts\":{\"redeploy\":\"fuse connector rm <%this.name%> && yarn deploy\",\"deploy\":\"fuse connector deploy <%this.name%> -d .\",\"get\":\"fuse connector get <%this.name%> -d .\"},\"dependencies\":{\"@fusebit-int/framework\":\"5.5.7\",\"@fusebit-int/salesforce-connector\":\"5.5.7\"}}"
            },
            "handler": "@fusebit-int/salesforce-connector"
          },
          "id": "<%this.id%>",
          "tags": {
            "fusebit.service": "salesforce"
          }
        },
        "salesforceIntegration": {
          "entityType": "integration",
          "data": {
            "configuration": {},
            "files": {
              "package.json": "{\"name\":\"@fusebit-int/catalog-feed-integration-salesforce-integration\",\"version\":\"5.5.7\",\"private\":true,\"scripts\":{\"deploy\":\"fuse integration deploy <% this.id %> -d .\",\"get\":\"fuse integration get <% this.id %> -d .\"},\"dependencies\":{\"@fusebit-int/framework\":\"5.5.7\",\"@fusebit-int/salesforce-provider\":\"5.5.7\"},\"files\":[\"./integration.js\",\"README.md\"]}",
              "./integration.js": "// Fusebit Salesforce Integration\n//\n// This simple Salesforce integration allows you to call Salesforce APIs on behalf of the tenants of your\n// application. Fusebit manages the Salesforce authorization process and maps tenants of your application\n// to their Salesforce credentials, so that you can focus on implementing the integration logic.\n//\n// A Fusebit integration is a microservice running on the Fusebit platform.\n// You control the endpoints exposed from the microservice. You call those endpoints from your application\n// to perform specific tasks on behalf of the tenants of your app.\n//\n// Learn more about Fusebit Integrations at: https://developer.fusebit.io/docs/integration-programming-model\n\nconst { Integration } = require('@fusebit-int/framework');\n\nconst integration = new Integration();\n\n// Fusebit uses the KoaJS (https://koajs.com/) router to allow you to add custom HTTP endpoints\n// to the integration, which you can then call from witin your application.\nconst router = integration.router;\n\n// The sample test endpoint of this integration gets all contacts stored in the Salesforce account associated with your tenant.\nrouter.post('/api/tenant/:tenantId/test', integration.middleware.authorizeUser('instance:get'), async (ctx) => {\n  // Create a Salesforce client pre-configured with credentials necessary to communicate with your tenant's Salesforce account.\n  // For the Salesforce SDK documentation, see https://jsforce.github.io/.\n  const salesforceClient = await integration.tenant.getSdkByTenant(ctx, 'salesforceConnector', ctx.params.tenantId);\n\n  const contacts = await salesforceClient.query('SELECT count() FROM Contact');\n\n  ctx.body = {\n    messasge: `Successfully loaded ${contacts.totalSize} contacts from SFDC`,\n  };\n});\n\nmodule.exports = integration;\n",
              "README.md": "Thanks for trying out Fusebit and downloading your <% global.consts.feed.name %> Integration code.\n\nUse your favorite tools to make any changes to the code in this folder.\n\n\n# Running your Integration\n\nTo run the Integration and test as you make changes, follow these steps:\n\n1. (Development-time only) The integration needs to know the Identity of the user on whose behalf to execute. In production, this will be handled by your application, but for test purposes, you can log in as yourself manually.\n\nOpen the test application for the '<% global.consts.integrationId %>' integration in the browser with:\n\n`fuse integration test <% global.consts.integrationId %>`\n\nYou will be asked to log in, and the integration will act on your behalf\ngoing forward.\n\n2. Note the `curl` command and JavaScript example displayed by the test application in the previous step and use that to invoke the integration. If your token expires, you can always obtain a new one by opening up the test application again with `fuse integration test <% global.consts.integrationId %>`, or by generating a new access token directly with `fuse token -o raw`.\n\n\n# Debugging your Integration\n\nAfter you make a code change and run the Integration, you can inspect `console`\noutput and any errors by running:\n\n`fuse integration log <% global.consts.integrationId %>`\n\n\n"
            },
            "handler": "./integration",
            "components": [
              {
                "name": "salesforceConnector",
                "skip": false,
                "provider": "@fusebit-int/salesforce-provider",
                "entityId": "<% global.entities.salesforceConnector.id %>",
                "dependsOn": [],
                "entityType": "connector"
              }
            ],
            "componentTags": {}
          },
          "id": "<% this.id %>",
          "tags": {
            "fusebit.service": "salesforce"
          }
        }
      }
    }
  },
  {
    "id": "slack-bot",
    "name": "Slack Bot",
    "smallIcon": "/images/slack.svg",
    "largeIcon": "/images/slack.svg",
    "version": "5.2.0",
    "description": "Building a simple Slack bot is easy with Fusebit! This example lets you send messages from your system to a channel in your customer's Slack instance.\n\n[Learn more](https://developer.fusebit.io/docs/slack)!\n",
    "tags": {
      "catalog": "slack,intro,popular,messaging"
    },
    "resources": {
      "configureAppDocUrl": "https://developer.fusebit.io/docs/slack#creating-your-own-slack-app"
    },
    "configuration": {
      "schema": {
        "type": "object",
        "properties": {
          "slackIntegration": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          "slackConnector": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 3
              }
            }
          },
          "ui": {
            "type": "object",
            "properties": {
              "toggle": {
                "type": "boolean",
                "description": "The \"toggle\" option renders boolean values as a toggle."
              }
            }
          }
        }
      },
      "uischema": {
        "type": "VerticalLayout",
        "elements": [
          {
            "type": "Control",
            "scope": "#/properties/slackIntegration/properties/id",
            "label": "Name"
          },
          {
            "type": "Control",
            "label": "Customize",
            "scope": "#/properties/ui/properties/toggle",
            "options": {
              "toggle": true
            }
          },
          {
            "type": "Control",
            "scope": "#/properties/slackConnector/properties/id",
            "label": "Slack Connector name",
            "rule": {
              "effect": "SHOW",
              "condition": {
                "scope": "#/properties/ui/properties/toggle",
                "schema": {
                  "const": true
                }
              }
            }
          }
        ]
      },
      "data": {
        "slackConnector": {
          "slackName": "slack-connector"
        }
      },
      "entities": {
        "slackConnector": {
          "entityType": "connector",
          "data": {
            "configuration": {
              "mode": {
                "useProduction": false
              },
              "scope": "chat:write users:read channels:read channels:join chat:write.public",
              "clientId": "<%global.consts.random%>",
              "clientSecret": "<%global.consts.random%>",
              "refreshErrorLimit": 100000,
              "refreshInitialBackoff": 100000,
              "refreshWaitCountLimit": 100000,
              "refreshBackoffIncrement": 100000,
              "accessTokenExpirationBuffer": 500
            },
            "files": {
              "package.json": "{\"name\":\"@fusebit-int/catalog-feed-integration-slack-bot-connector\",\"version\":\"5.5.7\",\"private\":true,\"scripts\":{\"redeploy\":\"fuse connector rm <%this.name%> && yarn deploy\",\"deploy\":\"fuse connector deploy <%this.name%> -d .\",\"get\":\"fuse connector get <%this.name%> -d .\"},\"dependencies\":{\"@fusebit-int/framework\":\"5.5.7\",\"@fusebit-int/slack-connector\":\"5.5.7\"}}"
            },
            "handler": "@fusebit-int/slack-connector"
          },
          "id": "<%this.id%>",
          "tags": {
            "fusebit.service": "slack"
          }
        },
        "slackIntegration": {
          "entityType": "integration",
          "data": {
            "configuration": {},
            "files": {
              "package.json": "{\"name\":\"@fusebit-int/catalog-feed-integration-slack-bot-integration\",\"version\":\"5.5.7\",\"private\":true,\"scripts\":{\"deploy\":\"fuse integration deploy <% this.id %> -d .\",\"get\":\"fuse integration get <% this.id %> -d .\"},\"dependencies\":{\"@fusebit-int/framework\":\"5.5.7\",\"@fusebit-int/slack-provider\":\"5.5.7\",\"superagent\":\"^6.1.0\"},\"files\":[\"./integration.js\",\"README.md\"]}",
              "./integration.js": "// Fusebit Slack Integration\n//\n// This simple Slack integration allows you to call Slack APIs on behalf of the tenants of your\n// application. Fusebit manages the Slack authorization process and maps tenants of your application\n// to their Slack credentials, so that you can focus on implementing the integration logic.\n//\n// A Fusebit integration is a microservice running on the Fusebit platform.\n// You control the endpoints exposed from the microservice. You call those endpoints from your application\n// to perform specific tasks on behalf of the tenants of your app.\n//\n// Learn more about Fusebit Integrations at: https://developer.fusebit.io/docs/integration-programming-model\n\nconst { Integration } = require('@fusebit-int/framework');\n\nconst integration = new Integration();\n\n// Fusebit uses the KoaJS (https://koajs.com/) router to allow you to add custom HTTP endpoints\n// to the integration, which you can then call from witin your application.\nconst router = integration.router;\n\n// The sample test endpoint of this integration sends a Direct Message to the Slack user associated with your tenant.\nrouter.post('/api/tenant/:tenantId/test', integration.middleware.authorizeUser('instance:get'), async (ctx) => {\n  // Create a Slack client pre-configured with credentials necessary to communicate with your tenant's Slack workspace.\n  // For the Slack SDK documentation, see https://slack.dev/node-slack-sdk/web-api.\n  const slackClient = await integration.tenant.getSdkByTenant(ctx, 'slackConnector', ctx.params.tenantId);\n\n  // Get the Slack user ID associated with your tenant\n  const slackUserId = slackClient.fusebit.credentials.authed_user.id;\n\n  // Send a Direct Message to the Slack user\n  const result = await slackClient.chat.postMessage({\n    text: 'Hello world from Fusebit!',\n    channel: slackUserId,\n  });\n\n  ctx.body = { message: `Successfully sent a message to Slack user ${slackUserId}!` };\n});\n\n// This endpoint lists Slack users of the workspace associated with your tenant.\nrouter.get('/api/tenant/:tenantId/users', integration.middleware.authorizeUser('instance:get'), async (ctx) => {\n  const slackClient = await integration.tenant.getSdkByTenant(ctx, 'slackConnector', ctx.params.tenantId);\n\n  const result = await slackClient.users.list();\n\n  ctx.body = result;\n});\n\n// This event handler responds to messages in channels that the bot has access to\nrouter.on('/:componentName/message', async (ctx) => {\n  const slackClient = await integration.service.getSdk(ctx, ctx.params.componentName, ctx.req.body.instanceIds[0]);\n\n  const messagingUser = ctx.req.body.data.event.user;\n  const authorizedListeningUser = ctx.req.body.data.authorizations[0].user_id;\n\n  if (messagingUser === authorizedListeningUser) {\n    console.log('no recursive response');\n    return;\n  }\n\n  const text = ctx.req.body.data.event.text;\n  slackClient.chat.postMessage({\n    text: `I'm responding via a webhook.  I was alerted when <@${messagingUser}> sent the message: \\n\\n \"${text}\"`,\n    channel: ctx.req.body.data.event.channel,\n  });\n});\n\nmodule.exports = integration;\n",
              "README.md": "Thanks for trying out Fusebit and downloading your <% global.consts.feed.name %> Integration code.\n\nUse your favorite tools to make any changes to the code in this folder.\n\n\n# Running your Integration\n\nTo run the Integration and test as you make changes, follow these steps:\n\n1. (Development-time only) The integration needs to know the Identity of the user on whose behalf to execute. In production, this will be handled by your application, but for test purposes, you can log in as yourself manually.\n\nOpen the test application for the '<% global.consts.integrationId %>' integration in the browser with:\n\n`fuse integration test <% global.consts.integrationId %>`\n\nYou will be asked to log in, and the integration will act on your behalf\ngoing forward.\n\n2. Note the `curl` command and JavaScript example displayed by the test application in the previous step and use that to invoke the integration. If your token expires, you can always obtain a new one by opening up the test application again with `fuse integration test <% global.consts.integrationId %>`, or by generating a new access token directly with `fuse token -o raw`.\n\n\n# Debugging your Integration\n\nAfter you make a code change and run the Integration, you can inspect `console`\noutput and any errors by running:\n\n`fuse integration log <% global.consts.integrationId %>`\n\n\n"
            },
            "handler": "./integration",
            "components": [
              {
                "name": "slackConnector",
                "skip": false,
                "provider": "@fusebit-int/slack-provider",
                "entityId": "<% global.entities.slackConnector.id %>",
                "dependsOn": [],
                "entityType": "connector"
              }
            ],
            "componentTags": {}
          },
          "id": "<% this.id %>",
          "tags": {
            "fusebit.service": "slack"
          }
        }
      }
    }
  }
]
